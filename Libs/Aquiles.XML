<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aquiles</name>
    </assembly>
    <members>
        <member name="T:Aquiles.Model.IAquilesKeyTokenRange">
            <summary>
            Aquiles structure interface to contains Cassandra Key Range structure
            <remarks>Interface for <see cref="T:Aquiles.Model.AquilesKeyRange"/> and <see cref="T:Aquiles.Model.AquilesTokenRange"/></remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Model.IAquilesObject`1">
            <summary>
            Interface for model object in order to support common methods
            </summary>
            <typeparam name="T">must derive from Thrift.Protocol.TBase</typeparam>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject`1.ToThrift">
            <summary>
            Convert this object to its equivalent Thrift object
            </summary>
            <returns>a Thrift Object</returns>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject`1.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject`1.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject`1.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesObject`1.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an query Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.IAquilesKeyTokenRange.Count">
            <summary>
            get or set how many keys to permit in the KeyRange
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSuperColumn">
            <summary>
            Aquiles structure to contains Cassandra SuperColumn structure
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ToThrift">
            <summary>
            Convert this structure into a valid Cassandra Thrift SuperColumn
            </summary>
            <returns>a cassandra thrift SuperColumn</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSuperColumn.ToString">
            <summary>
            overriding ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aquiles.Model.AquilesSuperColumn.Columns">
            <summary>
            get or set a List of columns
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSuperColumn.Name">
            <summary>
            get or set the name
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesDeletionMutation">
            <summary>
            Mutation to support elimination
            </summary>
        </member>
        <member name="T:Aquiles.Model.IAquilesMutation">
            <summary>
            Interface of Mutations
            </summary>
        </member>
        <member name="M:Aquiles.Model.IAquilesMutation.Validate">
            <summary>
            Validate the object data to assure consistency when used as input parameter.
            Note: Mutations are exclusive for 1 operation, so there is no need to validate for a type of operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ToThrift">
            <summary>
            Convert this object to its equivalent Thrift object
            </summary>
            <returns>a Thrift Object</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesDeletionMutation.Validate">
            <summary>
            Validate the object data to assure consistency when used as input parameter.
            Note: Mutations are exclusive for 1 operation, so there is no need to validate for a type of operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesDeletionMutation.SuperColumn">
            <summary>
            get or set SuperColumn Name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesDeletionMutation.Timestamp">
            <summary>
            get or set SuperColumn Timestamp
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesDeletionMutation.Predicate">
            <summary>
            get or set the predicate to match for the action
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesColumnFamilyType">
            <summary>
            Type of ColumnFamily
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesColumnFamilyType.Standard">
            <summary>
            only allows Columns as childs
            </summary>
        </member>
        <member name="F:Aquiles.Model.AquilesColumnFamilyType.Super">
            <summary>
            only allows SuperColumns as childs
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.ConnectionElement">
            <summary>
            Configuration Element holding connection information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.ConnectionElement.PoolType">
            <summary>
            get or set pool Type
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.ConnectionElement.FactoryType">
            <summary>
            get or set factory type
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.ConnectionElement.SpecialConnectionParameters">
            <summary>
            get or set collection of special parameters
            </summary>
        </member>
        <member name="T:Aquiles.Command.DescribeKeySpaceCommand">
            <summary>
            Command to retrieve KeySpace structure from cluster.
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractKeySpaceDependantCommand">
            <summary>
            Abstract class for an AquilesCommand that needs to have a KeySpace
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractCommand">
            <summary>
            Abstract Command that adds support for consistency Level over a real command
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractCommand.GetCassandraConsistencyLevel">
            <summary>
            get the consistencyLevel on Cassandra Thrift structure
            </summary>
        </member>
        <member name="P:Aquiles.Command.AbstractCommand.ConsistencyLevel">
            <summary>
            get or set the consistency level required.
            <remarks>If you dont know what is this, leave unassigned</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractKeySpaceDependantCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.AbstractKeySpaceDependantCommand.KeySpace">
            <summary>
            get or set the KeySpace
            </summary>
        </member>
        <member name="T:Aquiles.IAquilesCommand">
            <summary>
            Interface for any AquilesCommand with minimum methods to operate with.
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Execute the command over the opened thrift client
            </summary>
            <param name="cassandraClient">an opened thrift Client</param>
        </member>
        <member name="M:Aquiles.IAquilesCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="M:Aquiles.Command.DescribeKeySpaceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_keyspace" over the connection.
            
            Note: This command is not yet finished.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.DescribeKeySpaceCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.DescribeKeySpaceCommand.ColumnFamilies">
            <summary>
            get Dictionary of ColumnFamilies where key is the name of the ColumnFamily
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetCountCommand">
            <summary>
            Command to retrieve a Column or SuperColumn from Keyspace of a given cluster with the given key
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractKeySpaceColumnFamilyKeyDependantCommand">
            <summary>
            Abstract class for an AquilesCommand that needs to have a KeySpace, a ColumnFamily and a Key
            </summary>
        </member>
        <member name="T:Aquiles.Command.AbstractKeySpaceColumnFamilyDependantCommand">
            <summary>
            Abstract class for an AquilesCommand that needs to have a Keyspace and a ColumnFamily
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractKeySpaceColumnFamilyDependantCommand.BuildColumnPath(System.String,System.String)">
            <summary>
            Build Cassandra Thrift ColumnPath
            </summary>
            <param name="supercolumn">supercolumn name</param>
            <param name="column">column name</param>
            <returns>Cassandra Thrift ColumnPath</returns>
        </member>
        <member name="M:Aquiles.Command.AbstractKeySpaceColumnFamilyDependantCommand.BuildColumnPath(System.String,System.String,System.String)">
            <summary>
            Build Cassandra Thrift ColumnPath
            </summary>
            <param name="columnFamily">columnfamily</param>
            <param name="supercolumn">supercolumn name</param>
            <param name="column">column name</param>
            <returns>Cassandra Thrift ColumnPath</returns>
        </member>
        <member name="M:Aquiles.Command.AbstractKeySpaceColumnFamilyDependantCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="M:Aquiles.Command.AbstractKeySpaceColumnFamilyDependantCommand.BuildColumnParent(System.String)">
            <summary>
            Biuld Thrift ColumnParent structure using ColumnFamily and SuperColumn information
            </summary>
            <param name="superColumn">name for the supercolumn (null in case there is not one)</param>
            <returns>Thrift ColumnParent</returns>
        </member>
        <member name="P:Aquiles.Command.AbstractKeySpaceColumnFamilyDependantCommand.ColumnFamily">
            <summary>
            get or set the columnFamily
            </summary>
        </member>
        <member name="M:Aquiles.Command.AbstractKeySpaceColumnFamilyKeyDependantCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.AbstractKeySpaceColumnFamilyKeyDependantCommand.Key">
            <summary>
            get or set the Key
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetCountCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_count" over the connection. Return values are set into Output
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetCountCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.GetCountCommand.SuperColumnName">
            <summary>
            get or set the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCountCommand.Count">
            <summary>
            get the count retrieved after command execution
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSlicePredicate">
            <summary>
             Aquiles structure to contains Cassandra Slice Predicate structure
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ToThrift">
            <summary>
            Convert this object to its equivalent Thrift object
            </summary>
            <returns>a Thrift Object</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSlicePredicate.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSlicePredicate.Columns">
            <summary>
            get or set the List of Column Names
            <remarks>Columns anr SliceRange are are mutually exclusive</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSlicePredicate.SliceRange">
            <summary>
            get or set the SliceRange
            <remarks>Columns anr SliceRange are are mutually exclusive</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesColumnFamily">
            <summary>
            Aquiles structure to hold KeySpace's columnFamily internal information
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Name">
            <summary>
            get or set Name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumnFamily.Type">
            <summary>
            get or set the ColumnFamilyType
            </summary>
        </member>
        <member name="T:Aquiles.ILogger">
            <summary>
            Interface with the required methods to be able to log over Aquiles 
            </summary>
        </member>
        <member name="M:Aquiles.ILogger.Fatal(System.String,System.Object)">
            <summary>
            Fatal information before crashing
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Fatal(System.String,System.Object,System.Exception)">
            <summary>
            Fatal information before crashing
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Error(System.String,System.Object)">
            <summary>
            Error information (this might be overcome)
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Error(System.String,System.Object,System.Exception)">
            <summary>
            Error information (this might be overcome)
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Warn(System.String,System.Object)">
            <summary>
            Warning information (something went wrong, it was supposed to go right).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Warn(System.String,System.Object,System.Exception)">
            <summary>
            Warning information (something went wrong, it was supposed to go right).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Info(System.String,System.Object)">
            <summary>
            information (something we must be aware of).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Info(System.String,System.Object,System.Exception)">
            <summary>
            information (something we must be aware of).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Trace(System.String,System.Object)">
            <summary>
            Trace (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Trace(System.String,System.Object,System.Exception)">
            <summary>
            Trace (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="M:Aquiles.ILogger.Debug(System.String,System.Object)">
            <summary>
            Debug (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
        </member>
        <member name="M:Aquiles.ILogger.Debug(System.String,System.Object,System.Exception)">
            <summary>
            Debug (something we migth consider useful on runtime).
            </summary>
            <param name="className">classname</param>
            <param name="message">message</param>
            <param name="exception">exception</param>
        </member>
        <member name="T:Aquiles.Model.AquilesKeyRange">
            <summary>
            Aquiles structure to contains Cassandra Key Range structure (only support for a key range get)
            <remarks>StartKey will be included in the response</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ToThrift">
            <summary>
            Convert this structure into a valid Cassandra Thrift KeyRange
            </summary>
            <returns>a cassandra thrift KeyRange</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesKeyRange.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyRange.StartKey">
            <summary>
            get or set the Start Key (included in the command response)
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyRange.EndKey">
            <summary>
            get or set the Endkey
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyRange.Count">
            <summary>
            get or set how many keys to permit in the KeyRange
            </summary>
        </member>
        <member name="T:Aquiles.Connection.Endpoint.EndpointManagerType">
            <summary>
            Types of EndpointManagers to use
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Endpoint.EndpointManagerType.ROUNDROBIN">
            <summary>
            Cycle through the list of endpoints to balance the pool connections
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSliceRange">
            <summary>
            Aquiles structure to contains Cassandra Slice Range structure
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ToThrift">
            <summary>
            Convert this structure into a valid Cassandra Thrift SuperColumn
            </summary>
            <returns>a cassandra thrift SuperColumn</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSliceRange.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.Count">
            <summary>
            get or set how many columns to return.
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.StartColumn">
            <summary>
            get or set the column name to start the slice with
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.FinishColumn">
            <summary>
            get or set the column name to finish the slice with
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSliceRange.Reversed">
            <summary>
            get or set if the order of the result should be reversed
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesColumn">
            <summary>
            Aquiles structure to contains Cassandra Column structure
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ToThrift">
            <summary>
            Convert this structure into a valid Cassandra Thrift column
            </summary>
            <returns>a cassandra thrift column</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in a Query Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesColumn.ToString">
            <summary>
            overriding ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aquiles.Model.AquilesColumn.ColumnName">
            <summary>
            Cassandra column name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumn.Value">
            <summary>
            Cassandra column value
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesColumn.Timestamp">
            <summary>
            Cassandra Column TimeStamp (must match unix timestamp)
            <remarks>Don't mess with this unless you know what you are doing</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Exceptions.AquilesException">
            <summary>
            Exception thrown when something went wrong inside Aquiles
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveClusterVersionCommand">
            <summary>
            Command to retrieve the Cassandra version from a Cluster (the real name)
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterVersionCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_version" over the connection, set the Version property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterVersionCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.RetrieveClusterVersionCommand.Version">
            <summary>
            Get the Cassandra version
            </summary>
        </member>
        <member name="T:Aquiles.Command.DeleteCommand">
            <summary>
            Command to delete a Column, SuperColumn or a Key from Keyspace of a given cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.DeleteCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Command.DeleteCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "remove" over the connection. No return values
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.DeleteCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.DeleteCommand.SuperColumnName">
            <summary>
            get or set supercolumn name
            </summary>
        </member>
        <member name="P:Aquiles.Command.DeleteCommand.Column">
            <summary>
            get or set Column information
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.SpecialConnectionParameterElement">
            <summary>
            Configuration Element holding special connection parameters
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterElement.Key">
            <summary>
            get or set the Key for the special connection parameters (must be unique in the collection)
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterElement.Value">
            <summary>
            get or set the value for the special connection parameters 
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.AquilesConfigurationException">
            <summary>
            Exception thrown when there are invalid or missing values over the configuration
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Aquiles.Command.MultiGetSliceCommand">
            <summary>
            Command to retrieve slices of data on each of the given keys in parallel
            </summary>                    
        </member>
        <member name="M:Aquiles.Command.MultiGetSliceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "multiget_slice" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.MultiGetSliceCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Keys">
            <summary>
            get or set the list of Keys to retrieve
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.SuperColumn">
            <summary>
            get or set the name of the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Predicate">
            <summary>
            get or set the predicate to use
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Output">
            <summary>
            get the output of the command
            </summary>
        </member>
        <member name="T:Aquiles.Command.MultiGetSliceCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.MultiGetSliceCommand.Out.Results">
            <summary>
            get or set the results 
            <remarks>the dictionary key is actually the key used over cassandra</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetSliceCommand">
            <summary>
            Command to retrieve slices of data on the given key
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetSliceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_slice" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetSliceCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.SuperColumn">
            <summary>
            get or set the name of the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.Predicate">
            <summary>
            get or set the predicate to use
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.Output">
            <summary>
            get the output of the command
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetSliceCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetSliceCommand.Out.Results">
            <summary>
            get or set the results 
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.CassandraEndpointElement">
            <summary>
            Configuration Element to hold cassandra endpoint information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointElement.Address">
            <summary>
            get or set the address
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointElement.Port">
            <summary>
            get or set the Port
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointElement.Timeout">
            <summary>
            get or set the timeout
            </summary>
        </member>
        <member name="T:Aquiles.Command.AquilesConsistencyLevel">
            <summary>
            Ported Cassandra Consistency level for commands over the conection.
            <remarks>By convention this values must match Cassandra Consistency Level</remarks>
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.ZERO">
            <summary>
            Write: Ensure nothing
            Read: Not supported, because it doesn't make sense. 
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.ONE">
            <summary>
            Write: Ensure that the write has been written to at least 1 node, including hinted recipients
            Read: Will return the record returned by the first node to respond. A consistency check is always done in a background thread to fix any consistency issues when ConsistencyLevel.ONE is used. This means subsequent calls will have correct data even if the initial read gets an older value. (This is called read repair.)
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.QUORUM">
            <summary>
            Write: Ensure that the write has been written to at least 1 node's commit log and memory table before responding to the client. 
            Read: Will query all nodes and return the record with the most recent timestamp once it has at least a majority of replicas reported. Again, the remaining replicas will be checked in the background.
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.DCQUORUM">
            <summary>
            undocumented
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.DCQUORUMSYNC">
            <summary>
            undocumented
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.ALL">
            <summary>
            Write: Ensure that the write is written to all ReplicationFactor nodes before responding to the client. Any unresponsive nodes will fail the operation
            Read: Will query all nodes and return the record with the most recent timestamp once all nodes have replied. Any unresponsive nodes will fail the operation
            </summary>
        </member>
        <member name="F:Aquiles.Command.AquilesConsistencyLevel.ANY">
            <summary>
            Write: Ensure that the write has been written to at least 1 node, including hinted recipients. 
            Read: Not supported. You probably want ONE instead. 
            </summary>
        </member>
        <member name="T:Aquiles.Command.BatchMutateCommand">
            <summary>
            Command to batch actions over a KeySpace of a Cluster.
            Posible actions are:
                - insert
                - delete
            </summary>
        </member>
        <member name="M:Aquiles.Command.BatchMutateCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Command.BatchMutateCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "remove" over the connection. No return values
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.BatchMutateCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.BatchMutateCommand.Mutations">
            <summary>
            get or set Mutation actions to be applied
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesTokenRange">
            <summary>
            Aquiles structure to contains Cassandra Key Range structure (only support for a Token range get)
            <remarks>EndToken might be equal of smaller than the StartToken. If EndToken is equal to StartToken then you will get the full ring</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ToThrift">
            <summary>
            Convert this structure into a valid Cassandra Thrift KeyRange
            </summary>
            <returns>a cassandra thrift KeyRange</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesTokenRange.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesTokenRange.StartToken">
            <summary>
            get or set the Start Token (excluded in the command response)
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesTokenRange.EndToken">
            <summary>
            get or set the End Token
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesTokenRange.Count">
            <summary>
            get or set how many keys to permit in the KeyRange
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveKeySpacesCommand">
            <summary>
            Command to retrieve the list of keyspaces for a cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeySpacesCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_keyspaces" over the connection, set the KeySpaces property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeySpacesCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeySpacesCommand.KeySpaces">
            <summary>
            get the list of keyspaces
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetCommand">
            <summary>
            Command to retrieve a Column or SuperColumn from Keyspace of a given cluster with the given key
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Command.GetCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get" over the connection. Return values are set into Output
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.GetCommand.Output">
            <summary>
            get the return value
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.SuperColumnName">
            <summary>
            get or set the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.ColumnName">
            <summary>
            get or set the ColumnName
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.Out.Column">
            <summary>
            get or set Column Information
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetCommand.Out.SuperColumn">
            <summary>
            get or set SuperColumn Information
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.CassandraClusterCollection">
            <summary>
            Configuration Collection containing Cassandra Cluster information
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.CreateNewElement">
            <summary>
            Creates and returns a new CassandraClusterElement element
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            </summary>
            <returns>a CassandraClusterElement object</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the endpoint of a CassandraClusterElement
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">a CassandraClusterElement</param>
            <returns>the endpoint of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.IndexOf(Aquiles.Configuration.CassandraClusterElement)">
            <summary>
            Given a CassandraClusterElement, it returns its position on the array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">a CassandraClusterElement contained on the array</param>
            <returns>the position of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Add(Aquiles.Configuration.CassandraClusterElement)">
            <summary>
            Add CassandraClusterElement on the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">element to be added</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Inner BaseAdd method
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Remove(Aquiles.Configuration.CassandraClusterElement)">
            <summary>
            Remove the specified CassandraClusterElement from the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="element">element to be removed</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specific position on the array
            </summary>
            <param name="index">index of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Remove(System.String)">
            <summary>
            Remove the specific element with the given name from the inner array
            </summary>
            <param name="name">name of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraClusterCollection.Clear">
            <summary>
            Clear the inner Array
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterCollection.CollectionType">
            <summary>
            get the CollectionType for this collection
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterCollection.Item(System.Int32)">
            <summary>
            returns the CassandraClusterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="index">position on the array</param>
            <returns>a CassandraClusterElement</returns>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterCollection.Item(System.String)">
            <summary>
            returns the CassandraClusterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraClusterElement"/>
            <param name="Name">name of the element</param>
            <returns>a CassandraClusterElement</returns>
        </member>
        <member name="T:Aquiles.Configuration.AquilesTextElement">
            <summary>
            ConfigurationElement to hold text values
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesTextElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            HACK
            </summary>
            <param name="reader"></param>
            <param name="serializeCollectionKey"></param>
        </member>
        <member name="P:Aquiles.Configuration.AquilesTextElement.Text">
            <summary>
            get or set the Text (innerText) value.
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveClusterNameCommand">
            <summary>
            Command to retrieve the ClusterName from a Cluster (the real name)
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterNameCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_cluster_name" over the connection, set the ClusterName property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveClusterNameCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.RetrieveClusterNameCommand.ClusterName">
            <summary>
            Get the ClusterName
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.EndpointManagerElement">
            <summary>
            Configuration element to hold endpointManager information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.EndpointManagerElement.Type">
            <summary>
            get or set the type to use
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.EndpointManagerElement.CassandraEndpoints">
            <summary>
            get or set the collection of CassandraEndpoints
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.EndpointManagerElement.DefaultTimeout">
            <summary>
            get or set the DefaultTime to be used when the CassandraEndpoint does not explicity declare one.
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesSetMutation">
            <summary>
            Mutation to support set and updage
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ToThrift">
            <summary>
            Convert this object to its equivalent Thrift object
            </summary>
            <returns>a Thrift Object</returns>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForInsertOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an insert Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForDeletationOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an deletation Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForSetOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.ValidateForQueryOperation">
            <summary>
            Validate the object data to assure consistency when used as input parameter when used in an set / update Operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.Model.AquilesSetMutation.Validate">
            <summary>
            Validate the object data to assure consistency when used as input parameter.
            Note: Mutations are exclusive for 1 operation, so there is no need to validate for a type of operation
            <remarks>Throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> in case there is something wrong</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSetMutation.Column">
            <summary>
            get or set Column information to be inserted
            <remarks>Column and SuperColumn are mutual exclusive</remarks>
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesSetMutation.SuperColumn">
            <summary>
            get or set the SuperColumn information to be inserted
            <remarks>Column and SuperColumn are mutual exclusive</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Model.AquilesKeyspace">
            <summary>
            Aquiles representation of a Keyspace
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyspace.Name">
            <summary>
            get or (internal) set Name
            </summary>
        </member>
        <member name="P:Aquiles.Model.AquilesKeyspace.ColumnFamilies">
            <summary>
            get or (internal) set Dictionary of ColumnFamilies where key is the name of the ColumnFamily
            </summary>
        </member>
        <member name="T:Aquiles.Exceptions.AquilesCommandException">
            <summary>
            Exception thrown when a command input parameters are not valid
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.CassandraClusterElement">
            <summary>
            ConfigurationElement holding Cluster information
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterElement.FriendlyName">
            <summary>
            get or set the Friendly name
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterElement.Connection">
            <summary>
            get or set the Connection configuration
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraClusterElement.EndpointManager">
            <summary>
            get or set the endpoint manager configuration
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveKeySpaceDistributionComand">
            <summary>
            Command to retrieve the keyspace's token distribution over the nodes from a Cluster (the real name)
            </summary>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeySpaceDistributionComand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "describe_ring" over the connection, set the Version property with the returned value.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.RetrieveKeySpaceDistributionComand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeySpaceDistributionComand.Output">
            <summary>
            Get the TokenRanges information
            </summary>
        </member>
        <member name="T:Aquiles.Command.RetrieveKeySpaceDistributionComand.Out">
            <summary>
            Ouput or return class for the RetrieveKeySpaceDistributionCommand
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeySpaceDistributionComand.Out.StartToken">
            <summary>
            get or set the Start Token
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeySpaceDistributionComand.Out.EndToken">
            <summary>
            get or set the End Token
            </summary>
        </member>
        <member name="P:Aquiles.Command.RetrieveKeySpaceDistributionComand.Out.Endpoints">
            <summary>
            get or set the list of endpoints within the cluster that have the token information
            </summary>
        </member>
        <member name="T:Aquiles.Command.LoginCommand">
            <summary>
            Command to login to a cluster to operate against the given Keyspace
            </summary>
        </member>
        <member name="M:Aquiles.Command.LoginCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "login" over the connection.
            <remarks>In case the login fails, posible login exceptions are AuthenticationException, AuthorizationException</remarks>
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.LoginCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.LoginCommand.Credentials">
            <summary>
            get or set the Credential information
            <remarks>It's a key-value map</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.SpecialConnectionParameterCollection">
            <summary>
            Configuration Collection containing special connection parameters
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.CreateNewElement">
            <summary>
            Creates and returns a new SpecialConnectionParameterElement element
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            </summary>
            <returns>a SpecialConnectionParameterElement object</returns>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the endpoint of a SpecialConnectionParameterElement
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">a SpecialConnectionParameterElement</param>
            <returns>the endpoint of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.IndexOf(Aquiles.Configuration.SpecialConnectionParameterElement)">
            <summary>
            Given a SpecialConnectionParameterElement, it returns its position on the array
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">a SpecialConnectionParameterElement contained on the array</param>
            <returns>the position of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Add(Aquiles.Configuration.SpecialConnectionParameterElement)">
            <summary>
            Add SpecialConnectionParameterElement on the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">element to be added</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Inner BaseAdd method
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Remove(Aquiles.Configuration.SpecialConnectionParameterElement)">
            <summary>
            Remove the specified SpecialConnectionParameterElement from the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="element">element to be removed</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specific position on the array
            </summary>
            <param name="index">index of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Remove(System.String)">
            <summary>
            Remove the specific element with the given name from the inner array
            </summary>
            <param name="name">name of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.SpecialConnectionParameterCollection.Clear">
            <summary>
            Clear the inner Array
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterCollection.CollectionType">
            <summary>
            get the CollectionType for this collection
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterCollection.Item(System.Int32)">
            <summary>
            returns the SpecialConnectionParameterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="index">position on the array</param>
            <returns>a SpecialConnectionParameterElement</returns>
        </member>
        <member name="P:Aquiles.Configuration.SpecialConnectionParameterCollection.Item(System.String)">
            <summary>
            returns the SpecialConnectionParameterElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.SpecialConnectionParameterElement"/>
            <param name="Name">name of the element</param>
            <returns>a SpecialConnectionParameterElement</returns>
        </member>
        <member name="T:Aquiles.IAquilesConnection">
            <summary>
            Interface for any AquilesConnection with minimum methods to operate with.
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesConnection.Open">
            <summary>
            Retrieves an opened connection from the cluster's pool. 
            <remarks>When calling this method explicity, automatic command retry is not posible. Using this methods delegates the close responsability to the client using the conection.</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesConnection.Close">
            <summary>
            Release or invalidate (depends on the status of the connection) the opened connection to the cluster's pool.
            <remarks>When calling tihs method explicity, a previous open method must be called from client code.</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.IAquilesConnection.Execute(Aquiles.IAquilesCommand)">
            <summary>
            Execute the <see cref="T:Aquiles.IAquilesCommand"/> over the connection.
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            <remarks>It validates the command before proceeding, so it might throw <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/> if there are malformed or missing input params.</remarks>
            </summary>
            <param name="command">command to be executed. Must implement IAquilesCommand</param>
        </member>
        <member name="T:Aquiles.Command.GetKeyRangeSliceCommand">
            <summary>
            Command to retrieve slices of data on each of the given keys in parallel
            </summary>                    
        </member>
        <member name="M:Aquiles.Command.GetKeyRangeSliceCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "get_range_slices" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.GetKeyRangeSliceCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.KeyTokenRange">
            <summary>
            get or set the Key / Token range to retrieve
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.SuperColumn">
            <summary>
            get or set the name of the SuperColumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.Predicate">
            <summary>
            get or set the predicate to use
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.Output">
            <summary>
            get the output of the command
            </summary>
        </member>
        <member name="T:Aquiles.Command.GetKeyRangeSliceCommand.Out">
            <summary>
            structure to Return Values
            </summary>
        </member>
        <member name="P:Aquiles.Command.GetKeyRangeSliceCommand.Out.Results">
            <summary>
            get or set the results 
            <remarks>the dictionary key is actually the key used over cassandra</remarks>
            </summary>
        </member>
        <member name="T:Aquiles.Command.InsertCommand">
            <summary>
            Command to insert a Column into a Keyspace of a given cluster
            </summary>
        </member>
        <member name="M:Aquiles.Command.InsertCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Command.InsertCommand.Execute(Apache.Cassandra.Cassandra.Client)">
            <summary>
            Executes a "insert" over the connection. No return values.
            </summary>
            <param name="cassandraClient">opened Thrift client</param>
        </member>
        <member name="M:Aquiles.Command.InsertCommand.ValidateInput(System.Collections.Generic.Dictionary{System.String,Aquiles.Model.AquilesKeyspace})">
            <summary>
            Validate the input parameters. 
            Throws <see cref="T:Aquiles.Exceptions.AquilesCommandParameterException"/>  in case there is some malformed or missing input parameters
            </summary>
            <param name="keyspaces">Dictionary of the keyspaces contained in the cluster that corresponds to the connection</param>
        </member>
        <member name="P:Aquiles.Command.InsertCommand.SuperColumn">
            <summary>
            get or set the name of the supercolumn
            </summary>
        </member>
        <member name="P:Aquiles.Command.InsertCommand.Column">
            <summary>
            get or set the column information
            </summary>
        </member>
        <member name="T:Aquiles.Connection.Pooling.ConnectionPoolType">
            <summary>
            Type of ConnectionPool
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Pooling.ConnectionPoolType.NOPOOL">
            <summary>
            No pool is used. Clients are created based on need, they are disposed as soon as they are returned.
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Pooling.ConnectionPoolType.SIZECONTROLLEDPOOL">
            <summary>
            Warmup enable and size-controlled enabled pool.
            </summary>
        </member>
        <member name="T:Aquiles.Connection.Factory.ConnectionFactoryType">
            <summary>
            Type of connection used to connect to Cassandra Cluster
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Factory.ConnectionFactoryType.DEFAULT">
            <summary>
            Default connection. It use binary protocol over socket transport
            </summary>
        </member>
        <member name="F:Aquiles.Connection.Factory.ConnectionFactoryType.BUFFERED">
            <summary>
            Buffered connection. It use binary protocol over buffered transport (This is faster than Default)
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.AquilesConfigurationSection">
            <summary>
            ConfigurationSection for Aquiles
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.AquilesConfigurationSection.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.AquilesConfigurationSection.SectionInformation">
            <summary>
            Gets a System.Configuration.SectionInformation object that contains the non-customizable information and functionality of the System.Configuration.ConfigurationSection object. 
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.AquilesConfigurationSection.LoggingManager">
            <summary>
            get or set the type of the client class to use for logging purpose
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.AquilesConfigurationSection.CassandraClusters">
            <summary>
            get or set the collection of clusters
            </summary>
        </member>
        <member name="T:Aquiles.Configuration.CassandraEndpointCollection">
            <summary>
            Configuration Collection containing cassandraEndpoints
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.CreateNewElement">
            <summary>
            Creates and returns a new CassandraEndpointElement element
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            </summary>
            <returns>a CassandraEndpointElement object</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the endpoint of a CassandraEndpointElement
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">a CassandraEndpointElement</param>
            <returns>the endpoint of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.IndexOf(Aquiles.Configuration.CassandraEndpointElement)">
            <summary>
            Given a CassandraEndpointElement, it returns its position on the array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">a CassandraEndpointElement contained on the array</param>
            <returns>the position of the element</returns>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Add(Aquiles.Configuration.CassandraEndpointElement)">
            <summary>
            Add CassandraEndpointElement on the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">element to be added</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Inner BaseAdd method
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Remove(Aquiles.Configuration.CassandraEndpointElement)">
            <summary>
            Remove the specified CassandraEndpointElement from the inner Array
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="element">element to be removed</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specific position on the array
            </summary>
            <param name="index">index of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Remove(System.String)">
            <summary>
            Remove the specific element with the given name from the inner array
            </summary>
            <param name="name">name of the element</param>
        </member>
        <member name="M:Aquiles.Configuration.CassandraEndpointCollection.Clear">
            <summary>
            Clear the inner Array
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointCollection.CollectionType">
            <summary>
            get the CollectionType for this collection
            </summary>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointCollection.Item(System.Int32)">
            <summary>
            returns the CassandraEndpointElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="index">position on the array</param>
            <returns>a CassandraEndpointElement</returns>
        </member>
        <member name="P:Aquiles.Configuration.CassandraEndpointCollection.Item(System.String)">
            <summary>
            returns the CassandraEndpointElement in that position
            </summary>
            <seealso cref="T:Aquiles.Configuration.CassandraEndpointElement"/>
            <param name="Name">name of the element</param>
            <returns>a CassandraEndpointElement</returns>
        </member>
        <member name="T:Aquiles.AquilesHelper">
            <summary>
            Static class to use as entrypoint for Aquiles. 
            Responsability: 
                * Manage cluster configuration
                * Manage connection creation
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.#ctor">
            <summary>
            private instance constructor that calls Initialize
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.InstanceInitialize">
            <summary>
            Read the configuration section, create logger, create clusters
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.CreateClusters">
            <summary>
            Create clusters within configuration
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.CreateLogger">
            <summary>
            Create an instance of the logger type from config file
            <remarks>can throw <see cref="T:Aquiles.Configuration.AquilesConfigurationException"/> in case something went wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.Initialize">
            <summary>
            Read the configuration section, create logger, create clusters
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
        </member>
        <member name="M:Aquiles.AquilesHelper.RetrieveConnection(System.String)">
            <summary>
            Retrieve a connection for cluster associated with the given clusterName. In case there is no cluster configured with the friendly name given, a null is returned.
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
            <param name="clusterName">friendly names chosen in the configuration section on the .config file</param>
            <returns>it returns a connection to work against the cluster.</returns>
        </member>
        <member name="M:Aquiles.AquilesHelper.InstanceRetrieveConnection(System.String)">
            <summary>
            Retrieve a connection for cluster associated with the given clusterName. In case there is no cluster configured with the friendly name given, a null is returned.
            <remarks>can throw <see cref="T:Aquiles.Exceptions.AquilesException"/> in case something went wrong</remarks>
            </summary>
            <param name="clusterName">friendly names chosen in the configuration section on the .config file</param>
            <returns>it returns a connection to work against the cluster.</returns>
        </member>
        <member name="T:Aquiles.Exceptions.AquilesCommandParameterException">
            <summary>
            Exception thrown when a command input parameters are not valid
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandParameterException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandParameterException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Aquiles.Exceptions.AquilesCommandParameterException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
    </members>
</doc>
